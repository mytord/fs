/*
 * First social
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package internal

import (
	"context"
	openapi "github.com/mytord/fs/backend/gen/opencliapi"
	"github.com/mytord/fs/backend/internal/repositories"
	"strconv"
)

// PrivateApiService is a service that implements the logic for the PrivateApiServicer
// This service should implement the business logic for every endpoint for the PrivateApi API.
// Include any external packages or services that will be required by this service.
type PrivateApiService struct {
	profileRep *repositories.ProfileRepository
}

// NewPrivateApiService creates a default api service
func NewPrivateApiService(profileRep *repositories.ProfileRepository) openapi.PrivateApiServicer {
	return &PrivateApiService{
		profileRep: profileRep,
	}
}

// GetCurrentProfile - Get current profile
func (s *PrivateApiService) GetCurrentProfile(ctx context.Context) (openapi.ImplResponse, error) {
	ctxUserId := ctx.Value("userId").(string)
	userId, _ := strconv.Atoi(ctxUserId)

	profile, err := s.profileRep.Find(userId)

	if err != nil {
		return ErrorResponse(err)
	}

	return SuccessResponse(openapi.Profile{
		Id:        int32(profile.Id),
		Email:     profile.Email,
		FirstName: profile.FirstName,
		LastName:  profile.LastName,
		Age:       int32(profile.Age),
		City:      profile.City,
		Interests: profile.Interests,
	})
}

// GetProfile - Get profile by ID
func (s *PrivateApiService) GetProfile(ctx context.Context, id int64) (openapi.ImplResponse, error) {
	profile, err := s.profileRep.Find(int(id))

	if err != nil {
		return ErrorResponse(err)
	}

	return SuccessResponse(openapi.Profile{
		Id:        int32(profile.Id),
		Email:     profile.Email,
		FirstName: profile.FirstName,
		LastName:  profile.LastName,
		Age:       int32(profile.Age),
		City:      profile.City,
		Interests: profile.Interests,
	})
}

// ListProfiles - List profiles
func (s *PrivateApiService) ListProfiles(ctx context.Context, limit, offset int32, search string) (openapi.ImplResponse, error) {
	limitInt := Min(int(limit), 100)
	offsetInt := int(offset)

	// infinite scrolling: using offset filter and over-limit query
	// to avoid count queries
	profiles, err := s.profileRep.FindAll(search, limitInt+1, offsetInt)

	if err != nil {
		return ErrorResponse(err)
	}

	cntProfilesFound := len(profiles)
	cntProfilesToShow := Min(cntProfilesFound, limitInt)

	response := openapi.ProfileCollection{
		HasMore:  cntProfilesFound > limitInt,
		Entities: []openapi.Profile{},
	}

	for i := 0; i < cntProfilesToShow; i++ {
		profile := profiles[i]
		response.Entities = append(response.Entities, openapi.Profile{
			Id:        int32(profile.Id),
			Email:     profile.Email,
			FirstName: profile.FirstName,
			LastName:  profile.LastName,
			Age:       int32(profile.Age),
			City:      profile.City,
			Interests: profile.Interests,
		})
	}

	return SuccessResponse(response)
}
