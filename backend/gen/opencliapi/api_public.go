/*
 * First social
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// PublicApiController binds http requests to an api service and writes the service results to the http response
type PublicApiController struct {
	service      PublicApiServicer
	errorHandler ErrorHandler
}

// PublicApiOption for how the controller is set up.
type PublicApiOption func(*PublicApiController)

// WithPublicApiErrorHandler inject ErrorHandler into controller
func WithPublicApiErrorHandler(h ErrorHandler) PublicApiOption {
	return func(c *PublicApiController) {
		c.errorHandler = h
	}
}

// NewPublicApiController creates a default api controller
func NewPublicApiController(s PublicApiServicer, opts ...PublicApiOption) Router {
	controller := &PublicApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the PublicApiController
func (c *PublicApiController) Routes() Routes {
	return Routes{
		{
			"CreateProfile",
			strings.ToUpper("Post"),
			"/api/register",
			c.CreateProfile,
		},
		{
			"Login",
			strings.ToUpper("Post"),
			"/api/login",
			c.Login,
		},
	}
}

// CreateProfile - Register new profile
func (c *PublicApiController) CreateProfile(w http.ResponseWriter, r *http.Request) {
	profileParam := Profile{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&profileParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProfileRequired(profileParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateProfile(r.Context(), profileParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// Login - Logs user into the system
func (c *PublicApiController) Login(w http.ResponseWriter, r *http.Request) {
	loginCredentialsParam := LoginCredentials{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&loginCredentialsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLoginCredentialsRequired(loginCredentialsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Login(r.Context(), loginCredentialsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}
